:PROPERTIES:
:ID:       E8EE0CF6-A8D8-4A9C-A2EF-F8B0FF466E25
:END:
#+title: cl web

* Hunchetoot
Hunchetoot是web server。

* 安装
安装需要的包：
#+begin_src lisp
(ql:quickload '("hunchentoot" "caveman2" "spinneret" "djula" "easy-routes"))  
#+end_src

* 最简webserver

** 提供本地文件
#+begin_src lisp
(defvar *acceptor* (make-instance 'hunchentoot:easy-acceptor
                                  :port 4242))
(hunchentoot:start *acceptor*)  
#+end_src

如上代码启动了本地的4242端口。默认地，Hunchentoot会提供本地www目录中的文件供访问。在Slime中，可以功过M-.来访问easy-acceptor的源码来确定www的位置。



可以通过设定变量来修改供访问的目录：
#+begin_src lisp
(setf (hunchentoot:acceptor-document-root *acceptor*)
      #p"path/to/www")  
#+end_src


在www目录中，创建index.html文件以供访问，然后可以以以下代码启动：
#+begin_src lisp
(defvar *my-acceptor* (make-instance 'hunchentoot:easy-acceptor
				     :port 4444
				     :document-root #p"www/"))

(hunchentoot:start *my-acceptor*)
#+end_src



* Routing

** 简单的routes

*** Hunchentoot
要绑定function到route，创建一个prefix dispatch然后加入到 =*dispatch-table*=:
#+begin_src lisp
  (defun hello ()
    (format nil "Hello, it works!"))

  ;; 绑定路径/hello到方程hello
  (push (hunchentoot:create-prefix-dispatcher "/hello" #'hello)
	hunchentoot:*dispatch-table*)

#+end_src


*** Easy-routes
easy-routes 是 Hunchentoot的拓展。它提供了：
- dispatch
- arguments extraction
- decorators
- URL generation
- visualization of routes
- and more
