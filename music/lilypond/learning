[2018-12-19 16:19:45]

LilyPond is a compiled system: it is run on a text file describing the music. The resulting output is viewed on-screen or printed.

Frescobaldi is a lightweight, yet powerful, music and text editor with many features added and enhanced particularly for LilyPond. 
Major features include point-and-click links between the code and music views, 
detailed score wizards, built-in LilyPond documentation browser, syntax highlighting and automatic completion. 

Frescobaldi is written in Python, with PyQt4 for its user interface.



* 1. Tutorial
** 1.1 Compiling a file
“Compiling” is the term used for processing an input file in LilyPond format to produce output file(s). 
Output files are generally PDF (for printing or viewing), MIDI (for playing), and PNG (for online use). 


\version "2.18.2"
{
  c' e' g' e'
}


lilypond test.ly

Note: Notes and lyrics in LilyPond input must always be surrounded by { curly braces }.
The braces should also be surrounded by a space unless they are at the beginning or end of a line to avoid ambiguities. 

** 1.2 How to write input file
*** 1.2.1 Simple notation
**** Pitches
The easiest way to enter notes is by using \relative mode. 
In this mode, the octave is chosen automatically by assuming the following note is always to be placed closest to the previous note, 
i.e., it is to be placed in the octave which is within three staff spaces of the previous note.

% set the starting point to middle C
\relative c' {
  c d e f
  g a b c
}


raise an octave by adding a single quote ' to the note name;
lower an octave by adding a comma , to the node name.

\relative c'' {
  a a, c' f,
  g g'' a,, f'
}

**** Durations
The duration of a note is specified by a number after the note name: 1 for a whole note, 2 for a half note, 4 for a quarter note and so on. 

If you do not specify a duration, the previous duration is used for the next note. The duration of the first note defaults to a quarter note. 

\relative c'' {
  a1
  a2 a4 a8 a
  a16 a a a a32 a a a a64 a a a a a a a a2
}

To create dotted notes, add a dot . to the duration number. The duration of a dotted note must be stated explicitly (i.e., with a number). 


\relative c'' {
  a4 a a4. a8
  a8. a16 a a8. a8 a4.
}



**** Rests
A rest is entered just like a note with the name r : 

\relative c'' {
  a4 r r2
  r8 a r4 r4. r8
}



**** Time signature
The time signature can be set with the \time command: 

\relative c'' {
  \time 3/4
  a4 a a
  \time 6/8
  a4. a
  \time 4/4
  a4 a a a
}

**** Tempo marks
The tempo indication and metronome mark can be set with the \tempo command: 
\relative c'' {
  \time 3/4
  \tempo "Andante"
  a4 a a
  \time 6/8
  \tempo 4. = 96
  a4. a
  \time 4/4
  \tempo  "Presto" 4 = 120
  a4 a a a
}


**** Clef
The clef can be set using the \clef command: 

\relative c' {
  \clef "treble"
  c1
  \clef "alto"
  c1
  \clef "tenor"
  c1
  \clef "bass"
  c1
}


*** 1.2.2 Working on input files
**** Version statement
\version "2.18.2"

The version statement is important for at least two reasons. 
First, it allows automatic updating of the input file as LilyPond syntax changes. 
Second, it describes the version of LilyPond needed to compile the file. 

If the version statement is omitted from an input file, 
LilyPond will print a warning during the compilation of the file.

**** Case Sensitive
Notes are lower case: ‘{ c d e }’ is valid input; 
‘{ C D E }’ will produce an error message. 


**** Whitespace insensitive
It does not matter how many spaces (or tabs or new lines) you add. 

**** Expressions
every piece of LilyPond input needs to have { curly braces } placed around the input. 
The braces should be surrounded by a space unless they are at the beginning or end of a line to avoid ambiguities.

A LilyPond command followed by a simple expression in braces (such as ‘\relative c' { … }’) also counts as a single music expression. 

**** Comments
% ...
%{ ... %}




[2018-12-20 15:48:59]
* 2.Common notation
** 2.1 Single staff notation
*** 2.1.1 Bar lines and bar checks
**** Bar lines
Single bar lines are automatically placed in the music so there is no need to add them manually. 
Other types of bar lines are added using \bar .

g1 e1 \bar "||" c2. c'4 \bar "|."

**** Bar checks
Though not strictly necessary, bar checks should be used in the input code to show where bar lines are expected to fall.
They are entered using the bar symbol, |
With bar checks, the program can verify that you’ve entered durations that make each measure add up to the correct length.

g1 | e1 | c2. c'4 | g4 c g e | c4 r r2 |



*** 2.1.2 Accidentals and key signatures

**** Accidentals
A sharp pitch is made by adding is to the name, and a flat pitch by adding es. 

cis4 ees fisis, aeses

**** Key signatures
The key signature is set with the command \key followed by a pitch and \major or \minor. 

\key d \major
a1 |
\key c \minor
a1 |

**** Key signatures and pitches
To determine whether to print an accidental, LilyPond examines the pitches and the key signature. 
The key signature only affects the printed accidentals, not the note’s pitch! 

LilyPond makes a clear distinction between musical content and layout. 
The alteration (flat, natural sign or sharp) of a note is part of the pitch, and is therefore musical content. 
Whether an accidental (a printed flat, natural or sharp sign) is printed in front of the corresponding note is a question of layout. 
Layout is something that follows rules, so accidentals are printed automatically according to those rules. 
The pitches in your music are works of art, so they will not be added automatically, and you must enter what you want to hear. 

[[file:key-signatures-and-pitches.png]]


Adding all alterations explicitly might require a little more effort when typing, 
but the advantage is that transposing is easier, and accidentals can be printed according to different conventions. 



*** 2.1.3 Ties and slurs

**** Ties
A tie is a created by appending a tilde ~ to the first note bing tied

g4~ g c2~ | c4~ c8 a~ a2 |


**** Slurs
A slur is a curve drawn across many notes. The starting note and ending note are marked with ( and ) respectively. 

d4( c16) cis( d e c cis d) e( d4)

**** Phrasing slurs
Slurs to indicate longer phrasing can be entered with \( and \). 
You can have both slurs and phrasing slurs at the same time, 
but you cannot have simultaneous slurs or simultaneous phrasing slurs. 

g4\( g8( a) b( c) b4\)

**** Warnings: slurs vs. ties

A slur looks like a tie, but it has a different meaning. 
A tie simply makes the first note longer, and can only be used on pairs of notes with the same pitch. 
Slurs indicate the articulation of notes, and can be used on larger groups of notes. 


*** 2.1.4 Articulation and dynamics

**** Articulation
Articulation refers to notation which indicates how a note or notes should be played. 
Slurs, accents, staccato, and legato are all examples of articulation. 

Common articulations can be added to a note using a dash - and a single character.

c4-^ c-+ c-- c-! |
c4-> c-. c2-_ 


**** Fingerings
Fingering indications can be added to a note using a dash (-) and the digit to be printed.

c4-3 e-5 b-2 a-1

Articulations and fingerings are usually placed automatically, 
but you can specify a direction by replacing the dash (-) with ^ (up) or _ (down). 

c4_+^1 d^. f^4_2-> e^-_+


**** Dynamics
Dynamic signs are made by adding the markings (with a backslash) to the note.

c4\ff c\mf c\p c\pp

Crescendi and decrescendi are started with the commands \< and \>. 
The next dynamics sign, for example \f, will end the (de)crescendo, or the command \! can be used.

c4\< c\ff\> c c\!


*** 2.1.5 Adding text
Text may be added to your scores.

c^"espr" a_"legato"


Extra formatting may be added with the \markup comman.

c2^\markup { \bold espr }
a2_\markup {
  \dynamic f \italic \small { 2nd } \hspace #0.1 \dynamic p
}



*** 2.1.6 Automatic and manual beams
All beams are drawn automatically.
If you do not like the automatic beams, they may be overridden manually.
To correct just an occasional beam mark the first note to be beamed with [ and the last one with ]. 

a8[ ais] d[ ees r d] c16 b a8


Use the command \autoBeamOff to turn off automatic beaming and \autoBeamOn to turn it on again. 

\autoBeamOff
a8 c b4 d8. c16 b4 |
\autoBeamOn
a8 c b4 d8. c16 b4 |


*** 2.1.7 Advanced rhythmic commands
**** Partial measure
A pickup (or anacrusis) is entered with the keyword \partial. 
It is followed by a duration.

\relative c'' {
  \partial 8 f8 |
  c2 d |
}

\relative c'' {
  f8 |
  c2 d |
}

[[file:partial.png]]


**** Tuplets
Tuplets are made with the \tuplet keyword. 
It takes two arguments: a fraction and a piece of music. 

The fraction is the number of tuplet notes over the number of notes normally filling the same duration

\tuplet 3/2 { f8 g a }
\tuplet 3/2 { c8 r c }
\tuplet 3/2 { f,8 g16[ a g a] }
\tuplet 3/2 { d4 a8 }


**** Grace notes

Grace notes are created with the \grace command, 
although they can also be created by prefixing a music expression with the keyword \appoggiatura or \acciaccatura .

[[file:grace.png]]




** 2.2 Multiple notes at once

*** 2.2.1 Music expressions 
In LilyPond input files, music is represented by music expressions. 
A single note is a music expression: a4

Enclosing a note in braces creates a compound music expression: { a4 g4 }

Putting a group of music expressions in braces means that they are in sequence. 
The result is another music expression: { { a4 g } f4 g }


**** Mathematical expressions
This mechanism is similar to mathematical formulas: a big formula is created by composing small formulas. 
Such formulas are called expressions, and they can contain other expressions, so you can make arbitrarily complex and large expressions. 

1
1 + 2
(1 + 2) * 3
((1 + 2) * 3) / (4 * 5)


**** Simutaneous music expressions: multiple staves (use new staff explicitly)
A ‘simultaneous’ music expression is formed by enclosing expressions inside << and >>.

[[file:multiple-staves.png]]

**** Simutaneous music expressions: single staff 
To determine the number of staves in a piece, LilyPond looks at the beginning of the first expression. 

If there is a single note, there is one staff; 
if there is a simultaneous expression, there is more than one staff.

[[file:single-staff.png]]

\relative c'' {
  c2 <<c e>> |
  { <<c e>>  <<b d f>> } | 
}

[[file:single-staff2.png]]

*** 2.2.2  Multiple staves
If the score begins with simultaneous music expressions, LilyPond creates multiples staves. 
However, it is easier to see what happens if we create each staff explicitly. 

[[file:new-staff.png]]

The command \new introduces a ‘notation context.’ 
A notation context is an environment in which musical events (like notes or \clef commands) are interpreted. 
For simple pieces, such notation contexts are created automatically. 
For more complex pieces, it is best to mark contexts explicitly. 


Time signatures entered in one staff affect all other staves by default. 
On the other hand, the key signature of one staff does not affect other staves. 
This different default behavior is because scores with transposing instruments are more common than polyrhythmic scores. 


*** 2.2.3 Staff groups
Piano music is typeset in two staves connected by a brace.

\new PianoStaff <<
  \new Staff …
  \new Staff …
>>


*** 2.2.4 Combining notes into chords
Notes can be combined into chords by indicating they are simultaneous by enclosing them in double angle brackets. 
However, the normal way of indicating a chord is to surround the pitches with single angle brackets. 
Note that all the notes in a chord must have the same duration, and that the duration is placed after the closing bracket. 

[[file:chord.png]]

Think of chords as almost equivalent to single notes: almost everything you can attach to a single note can be attached to a chord, and everything must go outside the angle brackets.




** 2.3 Songs
*** 2.3.1 Setting simple songs
[[file:lyrics.png]]

Lyrics are entered by separating each syllable with a space. 
Note the double angle brackets <<…>> around the whole piece to show that the music and lyrics are to occur at the same time. 

*** 2.3.2 Aligning lyrics to a melody
**** situation 1:
melisma /mer 'li z mer/: a single syllable (/'si ler bl/) sung to more than one note.

spread a syllable over multiple notes:
the melismata can be indicated in just the lyrics by using a underscore _ for each note that should be included in the melisma.

a4 b8 c1[ b] a |
moon doth shine _ as |
**** situation 2:
a syllable extends over several notes or a single very long note

an extender line is usually drawn from the syllable extending under all the notes for that syllable.
It is entered as two underscores __ .

c4.( bes8 a4. g8 fis4.) g8 |
laid __ in |

**** situation 3:
words containing more than one syllable.

words are usually split one syllable to a note, with hyphens between syllables.
Such hyphens are entered as two dashes, resulting in a centered hyphen between the syllables.

[[file:word-syllable.png]]


**** situation 4:
setting more than one syllable to a single note.

This is achieved by linking the syllables together with a single underscore _ (with no spaces), or enclosing them in quotes.

[[file:more-syllable-one-note.png]]

*** 2.3.3 Lyrics to multiple staves

[[file:lyrics-to-multiple-staves.png]]

[2018-12-21 00:26:25]
** 2.4 Final touches
*** 2.4.1 Organizing pieces with variables
When all the music elements are combined to produce large files,
the music expressions get a lot bigger.
In polyphonic music with many staves, the input files can become very confusing.
We can reduce this confusion by using variables.

With variables we can break up complex music expressions.

A variable is assigned as follows:
nameMusic = { ... }


The contents of the music expression namedMusic can be used later 
by placing a backslash in front of the name 
(\namedMusic, just like a normal LilyPond command). 


The name of a variable must have alphabetic characters only, no numbers, underscores, or dashes. 
*** 2.4.2 Adding titles

\version "2.18.2"

\header {
  title = "Symphony"
  composer = "Me"
  opus = "Op. 9"
}

{
  … music …
}
*** 2.4.3 Absolute note names
we always used \relative to define pitches. This is usually the fastest way to enter most music.
Without \relative, pitches are interpreted in absolute mode.

However, absolute mode is useful for music which has large intervals, and is extremely useful for computer-generated LilyPond files. 
When cutting and pasting melody fragments, absolute mode preserves the original octave. 


If you are using absolute music inside of relative, 
you’ll need to mark the absolute music explicitly with \absolute to stop it from becoming part of the relative music

\relative c { c'4 \absolute { f'' g'' } c }
