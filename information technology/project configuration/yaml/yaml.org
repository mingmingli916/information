* What is YAML
YAML (a recursive acronym for "YAML Ain't Markup Language") is a human-readable data-serialization language. 

* What is YAML for?
For configuration files and in applications where data is being stored or transmitted. 

* Relationship with XML and JSON
vs XML: minimal syntax which intentionally differs from SGMLâ€¯
vs JSON: superset of JSON

* Syntax
- Whitespace indentation is used for denoting structure; however, tab characters are not allowed as part of indentation.
- Comments begin with the number sign (#), can start anywhere on a line and continue until the end of the line.
- List members are denoted by a leading hyphen (-) with one member per line.
  - A list can also be specified by enclosing text in square brackets ([ ]) with each entry separated by commas.
- An associative array entry is represented using colon space in the form key: value with one entry per line.
  - A question mark can be used in front of a key, in the form "?key: value" to allow the key to contain leading dashes, square brackets, etc., without quotes.
  - An associative array can also be specified by text enclosed in curly braces ({ }), with keys separated from values by colon and the entries separated by commas
- Strings (scalars) are ordinarily unquoted, but may be enclosed in double-quotes ("), or single-quotes (').
- Block scalars are delimited with indentation with optional modifiers to preserve (|) or fold (>) newlines.
- Multiple documents within a single stream are separated by three hyphens (---).
  - Three periods (...) optionally end a document within a stream.
- Repeated nodes are initially denoted by an ampersand (&) and thereafter referenced with an asterisk (*).
- Nodes may be labeled with a type or tag using the exclamation point (!!) followed by a string, which can be expanded into a URI.


* Example
#+BEGIN_EXAMPLE
--- # multiple documents within a single stream
- a # list
- b
- c
---
[a, b, c] # inline list
---
name: Mike Chyson # key-value pair
age: 32
---
{name: Mike Chyson, age: 32} # inline key-value pair
---
data: |
  hello # string
---
data: >
  hello # string
---
# folded text converts newlines to spaces and removes leading whitespace
- {name: Mike, age: 32}
- name: Mike
  age: 32
- [name, age]: [Mike, 32]
---
- step: &id001 # define anchor label
    instrument: Lasik 200
    pulseEnegy: 5.4
    pulseDuration: 12
    repetition: 1000
    spotSize: 1mm
- step: &id002
    instrument:      Lasik 2000
    pulseEnergy:     5.0
    pulseDuration:   10
    repetition:      500
    spotSize:        2mm
- step: *id001
- step: *id002
- step: *id002
--- # built-in data types use a double-exclamation sigil prefix (!!).
a: 123                     # an integer
b: "123"                   # a string, disambiguated by quotes
c: 123.0                   # a float
d: !!float 123             # also a float via explicit data type prefixed by (!!)
e: !!str 123               # a string, disambiguated by explicit type
f: !!str Yes               # a string via explicit type
g: Yes                     # a boolean True (yaml1.1), string "Yes" (yaml1.2)
h: Yes we have No bananas  # a string, "Yes" and "No" disambiguated by context.
---
picture: !!binary |
  R0lGODdhDQAIAIAAAAAAANn
  Z2SwAAAAADQAIAAACF4SDGQ
  ar3xxbJ9p0qa7R0YxwzaFME
  1IAADs=
--- # Local data types use a single exclamation mark (!).
myObject:  !myClass { name: Joe, age: 15 }


#+END_EXAMPLE
